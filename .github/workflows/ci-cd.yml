#name: CI/CD Pipeline
#
#on:
#  push:
#    branches:
#      - master # Trigger the workflow on push events to the master branch
#  pull_request:
#    branches:
#      - master # Trigger the workflow on pull request events to the master branch
#
#jobs:
#  build:
#    runs-on: ubuntu-latest # Use the latest Ubuntu runner
#
#    services:
#      mongo:
#        image: mongo:latest # Use the latest MongoDB image
#        ports:
#          - 27017:27017 # Map port 27017 on the host to port 27017 on the container
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4 # Checkout the repository code
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4 # Set up Java Development Kit (JDK) version 17
#        with:
#          java-version: '17' # Specify the Java version
#          distribution: 'temurin' # Specify the JDK distribution
#
#      - name: Set environment variables
#        run: |
#          echo "MONGODB_AUTH_DB=admin" >> $GITHUB_ENV # Set MongoDB authentication database
#          echo "MONGODB_DB=school" >> $GITHUB_ENV # Set MongoDB database name
#          echo "MONGODB_PORT=27017" >> $GITHUB_ENV # Set MongoDB port
#          echo "MONGODB_HOST=localhost" >> $GITHUB_ENV # Set MongoDB host
#
#      - name: Wait for MongoDB to start
#        run: |
#          for i in `seq 1 60`; do
#            nc -z localhost 27017 && echo "MongoDB is up" && exit 0
#            echo "Waiting for MongoDB..."
#            sleep 5
#          done
#          echo "MongoDB did not start in time" && exit 1 # Wait for MongoDB to start, with a timeout
#
#      - name: Check MongoDB logs
#        run: docker logs $(docker ps -q --filter ancestor=mongo:latest) # Check the logs of the MongoDB container
#
#      - name: Build with Maven
#        run: mvn clean install -e -X # Build the project using Maven
#
#      - name: Start Spring Boot application
#        run: mvn spring-boot:run & # Start the Spring Boot application
#        env:
#          SPRING_PROFILES_ACTIVE: test # Set the active Spring profile to 'test'
#
#      - name: Wait for Spring Boot to start
#        run: |
#          for i in `seq 1 60`; do
#            nc -z localhost 8080 && echo "Spring Boot is up" && exit 0
#            echo "Waiting for Spring Boot..."
#            sleep 5
#          done
#          echo "Spring Boot did not start in time" && exit 1 # Wait for Spring Boot to start, with a timeout
#
#      - name: Run smoke tests
#        run: mvn test -P smoke-tests -e -X # Run smoke tests using Maven
#
#      - name: Run unit tests
#        run: mvn test -e -X # Run unit tests using Maven
#
#      - name: Run integration tests
#        run: mvn failsafe:integration-test -e -X # Run integration tests using Maven
#
#      - name: Run Cucumber tests
#        run: mvn test -P cucumber-tests -Dcucumber.options="--plugin pretty" -e -X # Run Cucumber tests using Maven

#name: CI/CD Pipeline
#
#on:
#  push:
#    branches:
#      - master
#  pull_request:
#    branches:
#      - master
#
#jobs:
#  build:
#    runs-on: ubuntu-latest
#
#    services:
#      mongo:
#        image: mongo:latest
#        ports:
#          - 27017:27017
#
#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4
#
#      - name: Set up JDK 17
#        uses: actions/setup-java@v4
#        with:
#          java-version: '17'
#          distribution: 'temurin'
#
#      - name: Set environment variables
#        run: |
#          echo "MONGODB_AUTH_DB=admin" >> $GITHUB_ENV
#          echo "MONGODB_DB=school" >> $GITHUB_ENV
#          echo "MONGODB_PORT=27017" >> $GITHUB_ENV
#          echo "MONGODB_HOST=localhost" >> $GITHUB_ENV
#
#      - name: Wait for MongoDB to start
#        run: |
#          for i in `seq 1 60`; do
#            nc -z localhost 27017 && echo "MongoDB is up" && exit 0
#            echo "Waiting for MongoDB..."
#            sleep 5
#          done
#          echo "MongoDB did not start in time" && exit 1
#
#      - name: Check MongoDB logs
#        run: docker logs $(docker ps -q --filter ancestor=mongo:latest)
#
#      - name: Build with Maven
#        run: mvn clean install -e -X
#
#      - name: Start Spring Boot application
#        run: mvn spring-boot:run &
#        env:
#          SPRING_PROFILES_ACTIVE: test
#
#      - name: Wait for Spring Boot to start
#        run: |
#          for i in `seq 1 60`; do
#            nc -z localhost 8080 && echo "Spring Boot is up" && exit 0
#            echo "Waiting for Spring Boot..."
#            sleep 5
#          done
#          echo "Spring Boot did not start in time" && exit 1
#
#      - name: Run smoke tests
#        run: mvn test -P smoke-tests -e -X
#
#      - name: Run unit tests
#        run: mvn test -e -X
#
#      - name: Run integration tests
#        run: mvn failsafe:integration-test -e -X
#
#      - name: Run Cucumber tests
#        run: mvn test -P cucumber-tests -Dcucumber.options="--plugin pretty" -e -X
#
#      - name: Install JMeter
#        run: sudo apt-get install -y jmeter
#
#      - name: Copy JMeter properties
#        run: |
#          JMETER_HOME=$(dirname $(dirname $(which jmeter)))
#          sudo cp src/test/resources/jmeter.properties $JMETER_HOME/bin/jmeter.properties
#        shell: /usr/bin/bash -e {0}
#        env:
#          JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64
#          JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64
#          MONGODB_AUTH_DB: admin
#          MONGODB_DB: school
#          MONGODB_PORT: 27017
#          MONGODB_HOST: localhost
#
#      - name: Run JMeter performance tests
#        run: |
#          jmeter -n -t src/test/resources/performance/get-api-performance-test-plan.jmx -l results-get.jtl
#          jmeter -n -t src/test/resources/performance/post-api-performance-test-plan.jmx -l results-post.jtl
#          jmeter -n -t src/test/resources/performance/put-api-performance-test-plan.jmx -l results-put.jtl
#          jmeter -n -t src/test/resources/performance/patch-api-performance-test-plan.jmx -l results-patch.jtl
#          jmeter -n -t src/test/resources/performance/delete-api-performance-test-plan.jmx -l results-delete.jtl
#        shell: /usr/bin/bash -e {0}
#        env:
#          JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64
#          JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64
#          MONGODB_AUTH_DB: admin
#          MONGODB_DB: school
#          MONGODB_PORT: 27017
#          MONGODB_HOST: localhost
#
#      - name: Generate JMeter reports
#        run: |
#          jmeter -g results-get.jtl -o report-get
#          jmeter -g results-post.jtl -o report-post
#          jmeter -g results-put.jtl -o report-put
#          jmeter -g results-patch.jtl -o report-patch
#          jmeter -g results-delete.jtl -o report-delete
#        shell: /usr/bin/bash -e {0}
#        env:
#          JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64
#          JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64
#          MONGODB_AUTH_DB: admin
#          MONGODB_DB: school
#          MONGODB_PORT: 27017
#          MONGODB_HOST: localhost

name: CI/CD Pipeline

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Verify Java Installation
        run: |
          if [ ! -f /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64/bin/java ]; then
            echo "Java installation not found!"
            exit 1
          fi

      - name: Set environment variables
        run: |
          echo "MONGODB_AUTH_DB=admin" >> $GITHUB_ENV
          echo "MONGODB_DB=school" >> $GITHUB_ENV
          echo "MONGODB_PORT=27017" >> $GITHUB_ENV
          echo "MONGODB_HOST=localhost" >> $GITHUB_ENV

      - name: Wait for MongoDB to start
        run: |
          for i in `seq 1 60`; do
            nc -z localhost 27017 && echo "MongoDB is up" && exit 0
            echo "Waiting for MongoDB..."
            sleep 5
          done
          echo "MongoDB did not start in time" && exit 1

      - name: Check MongoDB logs
        run: docker logs $(docker ps -q --filter ancestor=mongo:latest)

      - name: Build with Maven
        run: mvn clean install -e -X

      - name: Start Spring Boot application
        run: mvn spring-boot:run &
        env:
          SPRING_PROFILES_ACTIVE: test

      - name: Wait for Spring Boot to start
        run: |
          for i in `seq 1 60`; do
            nc -z localhost 8080 && echo "Spring Boot is up" && exit 0
            echo "Waiting for Spring Boot..."
            sleep 5
          done
          echo "Spring Boot did not start in time" && exit 1

      - name: Run smoke tests
        run: mvn test -P smoke-tests -e -X

      - name: Run unit tests
        run: mvn test -e -X

      - name: Run integration tests
        run: mvn failsafe:integration-test -e -X

      - name: Run Cucumber tests
        run: mvn test -P cucumber-tests -Dcucumber.options="--plugin pretty" -e -X

      - name: Install JMeter
        run: sudo apt-get install -y jmeter

      - name: Install JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Verify Java Installation
        run: |
          if [ ! -f /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64/bin/java ]; then
            echo "Java installation not found!"
            exit 1
          fi

      - name: Run JMeter Tests for GET
        uses: QAInsights/PerfAction@v3.1
        with:
          test-plan-path: src/test/resources/performance/get-api-performance-test-plan.jmx
        env:
          JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64
          JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64
          MONGODB_AUTH_DB: admin
          MONGODB_DB: school
          MONGODB_PORT: 27017
          MONGODB_HOST: localhost

      - name: Run JMeter Tests for POST
        uses: QAInsights/PerfAction@v3.1
        with:
          test-plan-path: src/test/resources/performance/post-api-performance-test-plan.jmx
        env:
          JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64
          JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64
          MONGODB_AUTH_DB: admin
          MONGODB_DB: school
          MONGODB_PORT: 27017
          MONGODB_HOST: localhost

      - name: Run JMeter Tests for PUT
        uses: QAInsights/PerfAction@v3.1
        with:
          test-plan-path: src/test/resources/performance/put-api-performance-test-plan.jmx
        env:
          JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64
          JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64
          MONGODB_AUTH_DB: admin
          MONGODB_DB: school
          MONGODB_PORT: 27017
          MONGODB_HOST: localhost

      - name: Run JMeter Tests for PATCH
        uses: QAInsights/PerfAction@v3.1
        with:
          test-plan-path: src/test/resources/performance/patch-api-performance-test-plan.jmx
        env:
          JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64
          JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64
          MONGODB_AUTH_DB: admin
          MONGODB_DB: school
          MONGODB_PORT: 27017
          MONGODB_HOST: localhost

      - name: Run JMeter Tests for DELETE
        uses: QAInsights/PerfAction@v3.1
        with:
          test-plan-path: src/test/resources/performance/delete-api-performance-test-plan.jmx
        env:
          JAVA_HOME: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64
          JAVA_HOME_17_X64: /opt/hostedtoolcache/Java_Temurin-Hotspot_jdk/17.0.12-7/x64
          MONGODB_AUTH_DB: admin
          MONGODB_DB: school
          MONGODB_PORT: 27017
          MONGODB_HOST: localhost

      - name: Verify JMeter Results
        run: |
          if [ ! -f results-get.jtl ]; then
            echo "JMeter results file for GET not found!"
            exit 1
          fi
          if [ ! -f results-post.jtl ]; then
            echo "JMeter results file for POST not found!"
            exit 1
          fi
          if [ ! -f results-put.jtl ]; then
            echo "JMeter results file for PUT not found!"
            exit 1
          fi
          if [ ! -f results-patch.jtl ]; then
            echo "JMeter results file for PATCH not found!"
            exit 1
          fi
          if [ ! -f results-delete.jtl ]; then
            echo "JMeter results file for DELETE not found!"
            exit 1
          fi

      - name: Upload Results for GET
        uses: actions/upload-artifact@v2
        with:
          name: jmeter-results-get
          path: results-get.jtl

      - name: Upload Results for POST
        uses: actions/upload-artifact@v2
        with:
          name: jmeter-results-post
          path: results-post.jtl

      - name: Upload Results for PUT
        uses: actions/upload-artifact@v2
        with:
          name: jmeter-results-put
          path: results-put.jtl

      - name: Upload Results for PATCH
        uses: actions/upload-artifact@v2
        with:
          name: jmeter-results-patch
          path: results-patch.jtl

      - name: Upload Results for DELETE
        uses: actions/upload-artifact@v2
        with:
          name: jmeter-results-delete
          path: results-delete.jtl