name: CI/CD Pipeline - JMeter

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  jmeter-tests:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker
        run: |
          docker run -d --name jmeter-container -v ${{ github.workspace }}:/workspace -w /workspace openjdk:17-jdk-slim tail -f /dev/null

      - name: Install JMeter
        run: |
          docker exec jmeter-container apt-get update
          docker exec jmeter-container apt-get install -y jmeter

      - name: List JVM Directory
        run: docker exec jmeter-container ls -la /usr/lib/jvm

      - name: Set environment variables
        run: |
          docker exec jmeter-container sh -c "export JAVA_HOME=/usr/lib/jvm/java-11-openjdk-amd64"
          docker exec jmeter-container sh -c "export PATH=\$JAVA_HOME/bin:\$PATH"

      - name: Print Environment Variables
        run: |
          docker exec jmeter-container sh -c "echo 'JAVA_HOME: \$JAVA_HOME'"
          docker exec jmeter-container sh -c "echo 'PATH: \$PATH'"

      - name: List Java Directory Contents
        run: docker exec jmeter-container ls -la /usr/lib/jvm/java-11-openjdk-amd64/bin

      - name: Check Java Version
        run: docker exec jmeter-container java -version

      - name: Verify JMeter Test Plan Path
        run: docker exec jmeter-container ls -la /workspace/src/test/resources/performance/get-api-performance-test-plan.jmx

      - name: Check JMeter Version
        run: docker exec jmeter-container jmeter -v

      - name: Run JMeter Tests for GET
        run: |
          docker exec jmeter-container jmeter -n -t /workspace/src/test/resources/performance/get-api-performance-test-plan.jmx -l results-get.jtl
        env:
          JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64

      - name: Run JMeter Tests for POST
        run: |
          docker exec jmeter-container jmeter -n -t /workspace/src/test/resources/performance/post-api-performance-test-plan.jmx -l results-post.jtl
        env:
          JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64

      - name: Run JMeter Tests for PUT
        run: |
          docker exec jmeter-container jmeter -n -t /workspace/src/test/resources/performance/put-api-performance-test-plan.jmx -l results-put.jtl
        env:
          JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64

      - name: Run JMeter Tests for PATCH
        run: |
          docker exec jmeter-container jmeter -n -t /workspace/src/test/resources/performance/patch-api-performance-test-plan.jmx -l results-patch.jtl
        env:
          JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64

      - name: Run JMeter Tests for DELETE
        run: |
          docker exec jmeter-container jmeter -n -t /workspace/src/test/resources/performance/delete-api-performance-test-plan.jmx -l results-delete.jtl
        env:
          JAVA_HOME: /usr/lib/jvm/java-11-openjdk-amd64

      - name: Upload Results for GET
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results-get
          path: results-get.jtl

      - name: Upload Results for POST
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results-post
          path: results-post.jtl

      - name: Upload Results for PUT
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results-put
          path: results-put.jtl

      - name: Upload Results for PATCH
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results-patch
          path: results-patch.jtl

      - name: Upload Results for DELETE
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results-delete
          path: results-delete.jtl

      - name: Install Latency Lingo CLI
        run: |
          curl -L https://github.com/latency-lingo/cli/releases/latest/download/latency-lingo-cli_linux_amd64.tar.gz | tar -xz

      - name: Analyze Results for GET with Latency Lingo
        run: |
          ./latency-lingo-cli publish --file "results-get.jtl" --api-key "${{ secrets.LATENCY_LINGO_API_KEY }}" --label "GET API Performance Test Plan" --format "jmeter" --env "production" > output.log
          cat output.log
          result=$(grep "Test run status" output.log | awk '{print $6}')
          echo "result=$result" >> $GITHUB_OUTPUT
        env:
          LATENCY_LINGO_API_KEY: ${{ secrets.LATENCY_LINGO_API_KEY }}

      - name: Analyze Results for POST with Latency Lingo
        run: |
          ./latency-lingo-cli publish --file "results-post.jtl" --api-key "${{ secrets.LATENCY_LINGO_API_KEY }}" --label "POST API Performance Test Plan" --format "jmeter" --env "production" > output.log
          cat output.log
          result=$(grep "Test run status" output.log | awk '{print $6}')
          echo "result=$result" >> $GITHUB_OUTPUT
        env:
          LATENCY_LINGO_API_KEY: ${{ secrets.LATENCY_LINGO_API_KEY }}

      - name: Analyze Results for PUT with Latency Lingo
        run: |
          ./latency-lingo-cli publish --file "results-put.jtl" --api-key "${{ secrets.LATENCY_LINGO_API_KEY }}" --label "PUT API Performance Test Plan" --format "jmeter" --env "production" > output.log
          cat output.log
          result=$(grep "Test run status" output.log | awk '{print $6}')
          echo "result=$result" >> $GITHUB_OUTPUT
        env:
          LATENCY_LINGO_API_KEY: ${{ secrets.LATENCY_LINGO_API_KEY }}

      - name: Analyze Results for PATCH with Latency Lingo
        run: |
          ./latency-lingo-cli publish --file "results-patch.jtl" --api-key "${{ secrets.LATENCY_LINGO_API_KEY }}" --label "PATCH API Performance Test Plan" --format "jmeter" --env "production" > output.log
          cat output.log
          result=$(grep "Test run status" output.log | awk '{print $6}')
          echo "result=$result" >> $GITHUB_OUTPUT
        env:
          LATENCY_LINGO_API_KEY: ${{ secrets.LATENCY_LINGO_API_KEY }}

      - name: Analyze Results for DELETE with Latency Lingo
        run: |
          ./latency-lingo-cli publish --file "results-delete.jtl" --api-key "${{ secrets.LATENCY_LINGO_API_KEY }}" --label "DELETE API Performance Test Plan" --format "jmeter" --env "production" > output.log
          cat output.log
          result=$(grep "Test run status" output.log | awk '{print $6}')
          echo "result=$result" >> $GITHUB_OUTPUT
        env:
          LATENCY_LINGO_API_KEY: ${{ secrets.LATENCY_LINGO_API_KEY }}