name: CI/CD Pipeline - JMeter

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

jobs:
  jmeter-tests:
    runs-on: ubuntu-latest

    services:
      mongo:
        image: mongo:latest
        ports:
          - 27017:27017

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Docker Compose
        run: |
          sudo curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
          sudo chmod +x /usr/local/bin/docker-compose
          docker-compose --version

      - name: Build with Maven
        run: mvn clean install -e -X

      - name: Set up Docker Compose
        run: docker-compose up -d

      - name: Wait for Spring Boot to be healthy
        run: |
          for i in `seq 1 60`; do
            if [ "$(docker inspect --format='{{.State.Health.Status}}' springboot)" == "healthy" ]; then
              echo "Spring Boot is up"
              exit 0
            fi
            echo "Waiting for Spring Boot..."
            sleep 5
          done
          echo "Spring Boot did not become healthy in time"
          docker logs springboot --tail 100
          exit 1

      - name: Verify JMeter Test Plan Path
        run: docker exec $(docker ps -q --filter name=springboot) ls -la /workspace/src/test/resources/performance/get-api-performance-test-plan.jmx

      - name: Run JMeter Tests for GET
        run: |
          docker exec $(docker ps -q --filter name=springboot) jmeter -n -t /workspace/src/test/resources/performance/get-api-performance-test-plan.jmx -l results-get.jtl

      - name: Verify JTL File for GET
        run: |
          head -n 1 results-get.jtl
          if ! grep -q "timeStamp,elapsed,label,responseCode,responseMessage,threadName,dataType,success,failureMessage,bytes,sentBytes,grpThreads,allThreads,URL,Latency,IdleTime,Connect" results-get.jtl; then
            echo "Error: results-get.jtl is missing required columns" >&2
            exit 1
          fi

      - name: Upload Results for GET
        uses: actions/upload-artifact@v4
        with:
          name: jmeter-results-get
          path: results-get.jtl

      - name: Install Latency Lingo CLI
        run: |
          curl -L https://github.com/latency-lingo/cli/releases/latest/download/latency-lingo-cli_linux_amd64.tar.gz | tar -xz

      - name: Analyze Results for GET with Latency Lingo
        run: |
          set -e
          ./latency-lingo-cli publish --file "results-get.jtl" --api-key "${{ secrets.LATENCY_LINGO_API_KEY }}" --label "GET API Performance Test Plan" --format "jmeter" --env "production" > output.log || { cat output.log; exit 1; }
          result=$(grep "Test run status" output.log | awk '{print $6}')
          echo "result=$result" >> $GITHUB_OUTPUT
        env:
          LATENCY_LINGO_API_KEY: ${{ secrets.LATENCY_LINGO_API_KEY }}